using System.Collections.Generic;
using System.IO;
using FluentAssertions;
using RedPen.Net.Core.Config;
using RedPen.Net.Core.Validators;
using Xunit;
using Xunit.Abstractions;

namespace RedPen.Net.Core.Tests
{
    public class RedPenTests
    {
        private ITestOutputHelper output;

        public RedPenTests(ITestOutputHelper output)
        {
            this.output = output;
        }

        private static List<string> validationNames = new List<string>()
        {
            "CommaCount",
            "Contraction",
            "DoubledConjunctiveParticleGa",
            "DoubledJoshi",
            "DoubledWord",
            "DoubleNegative",
            "DuplicatedSection",
            "EmptySection",
            "FrequentSentenceStart",
            "GappedSection",
            "HankakuKana",
            "HeaderLength",
            "Hyphenation",
            "InvalidExpression",
            "InvalidSymbol",
            "InvalidWord",
            "JapaneseAbusage",
            "JapaneseAmbiguousNounConjunction",
            "JapaneseAnchorExpression",
            "JapaneseDoubledConjunction",
            "JapaneseDroppingRa",
            "JapaneseWordVariation",
            "JapaneseFiller",
            "JapaneseOfficialDocumentsKanjiUsage",
            "JapaneseGeneralNovelStyle",
            "JapaneseInappropriateWord",
            "JapaneseInvalidSa",
            "JapaneseJoyoKanji",
            "JapaneseMixedZenHanAlphabet",
            "JapaneseNumberExpression",
            "JapanesePreferTariTari",
            "JapaneseRedundantExpression",
            "JapaneseStyle",
            "JapaneseSymbolWithSpace",
            "JapaneseUnnaturalAlphabet",
            "JapaneseWeakExpression",
            "JavaScript",
            "KatakanaEndHyphen",
            "KatakanaSpellCheck",
            "ListLevel",
            "LongKanjiChain",
            "NumberFormat",
            "Okurigana",
            "ParagraphCount",
            "ParagraphStartWith",
            "InvalidParenthesis",
            "SectionWordCount",
            "SectionLevel",
            "SentenceLength",
            "SpaceBeginningOfSentence",
            "SpaceWithAlphabeticalExpression",
            "Spelling",
            "StartWithCapitalLetter",
            "SuccessiveSentence",
            "SuccessiveWord",
            "SuggestExpression",
            "SymbolWithSpace",
            "Taigendome",
            "UnexpandedAcronym",
            "VoidSection",
            "WeakExpression",
            "WordFrequency",
            "SentenceWordCount",
            "SuggestGrammarRule"
        };

        [Fact]
        public void BasicTest()
        {
            var confFilePath = Path.Combine(Directory.GetCurrentDirectory(), "Config", "DATA", "SampleConf.json");
            Configuration configuration = ConfigurationLoader.Load(File.ReadAllText(confFilePath));

            configuration.Lang.Should().Be("ja-JP");
            configuration.CultureInfo.Should().Be(new System.Globalization.CultureInfo("ja-JP"));
            configuration.Variant.Should().Be("zenkaku");
            configuration.ValidatorConfigurations.Count.Should().Be(26);

            ValidatorFactory validatorFactory = ValidatorFactory.GetInstance();
            List<Validator> validators = new List<Validator>();

            foreach (var validatorConfig in configuration.ValidatorConfigurations)
            {
                validationNames.Contains(validatorConfig.Name).Should().BeTrue();
                validatorConfig.Level.Should().Be(ValidationLevel.ERROR);
                output.WriteLine(validatorConfig.ToString());

                // OFFの場合はValidatorを生成しない。これはアプリケーションの都合なのでValidatorFactoryでは判定しない。
                if (validatorConfig.Level != ValidationLevel.OFF)
                {
                    validators.Add(validatorFactory.GetValidator(configuration.CultureInfo, configuration.SymbolTable, validatorConfig));
                }
            }

            // NOTE: 一旦すべてのConfigurationからValidadtorが生成されるパターンを想定する。
            validators.Count.Should().Be(configuration.ValidatorConfigurations.Count);

            // LevelがOFFだった場合はValidatorが作成されないので言語チェックもされない。
            //var errorLevelConf = configuration.ValidatorConfigurations[0];
            //configuration.ValidatorConfigurations[0] = errorLevelConf with { Level = ValidationLevel.OFF };
        }
    }
}
