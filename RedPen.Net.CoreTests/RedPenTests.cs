//   Copyright (c) 2024 KANEDA Akihiro <taoist.aki@gmail.com>
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

using System.Collections.Generic;
using System;
using FluentAssertions;
using RedPen.Net.Core.Config;
using RedPen.Net.Core.Errors;
using RedPen.Net.Core.Globals;
using RedPen.Net.Core.Model;
using RedPen.Net.Core.Parser;
using RedPen.Net.Core.Tokenizer;
using RedPen.Net.Core.Validators;
using RedPen.Net.Core.Validators.Tests;
using Xunit;
using System.Linq;
using Xunit.Abstractions;
using System.Collections.Immutable;

namespace RedPen.Net.Core.Tests
{
    public class RedPenTests
    {
        private ITestOutputHelper output;

        public RedPenTests(ITestOutputHelper output)
        {
            this.output = output;
        }

        [Fact]
        public void DefaultValidatorTest()
        {
        }

        /// <summary>
        /// 応用アプリケーション側で新規追加するValidationのロード＆動作テスト。
        /// </summary>
        [Fact()]
        public void AddonValidatorTest()
        {
            string jsonString = @"{
    // コメントも書けます。
    ""DocumentLang"": ""ja-JP"",
    ""Variant"": ""zenkaku"",
    ""MessageLang"": ""ja-JP"",
    ""ValidatorConfigurations"": [
        {
            ""Name"": ""Test"",
            ""Level"" : ""ERROR""
        }
    ]
}";

            // Testバリデーションの情報をConfigurationとして読み込む。
            var jsonLoader = new ConfigurationLoader(
                DefaultValidationDefinition.ValidationNameToValidatorConfigurationTypeMap.Add("Test", typeof(TestConfiguration)));
            Configuration configuration = jsonLoader.Load(jsonString);

            // Testバリデーションの情報が正しく読み込まれていることを確認。
            configuration.ValidatorConfigurations[0].ValidationName.Should().Be("Test");
            ValidatorFactory.GetValidatorFullName(configuration.ValidatorConfigurations[0])
                .Should().Be("RedPen.Net.Core.Validators.Tests.TestValidator");

            // Coreプロジェクトからは応用アプリケーション側への参照が無いので、ValidatorFactoryで生成することはできない。
            // よって、事前に型情報を与える必要がある。
            // NOTE: Typeはクラス定義すべてを包含するらしい。よって参照元プロジェクトから参照先プロジェクトのActivatorでクラス生成も可能。
            ValidatorFactory factory = new ValidatorFactory(new Dictionary<string, Type>() {
                { "Test", typeof(TestValidator) }
            }.ToImmutableDictionary());

            Validator validator = factory.GetValidator(
                configuration.DocumentCultureInfo,
                configuration.SymbolTable,
                configuration.ValidatorConfigurations[0]);

            validator.ValidationName.Should().Be("Test");
            (validator is TestValidator).Should().BeTrue();
            (validator is ISentenceValidatable).Should().BeTrue();

            // TestValidatorの動作確認。

            string sampleDocument = @"今日はa nice holydayですね。
あ、明日は雨だそうですよ。";

            // サンプルドキュメントに対してParse & Tokenizeを行う。
            Document document = null;
            try
            {
                // NOTE: ドキュメントのフォーマットは入力ファイルの拡張子などで判別するのが一般的だが、
                // それはCoreライブラリの領域ではないのでParserの指定は応用アプリケーションで行い、選択はCoreで行う。
                document = new PlainTextParser().Parse(
                    sampleDocument,
                    new SentenceExtractor(configuration.SymbolTable),
                    RedPenTokenizerFactory.CreateTokenizer(configuration.DocumentCultureInfo));
            }
            catch (Exception e)
            {
                Assert.True(false, "Exception not expected.");
            }

            // 簡易的に1つのValidatorについてSentence毎のエラーを取得するのみ。
            // Validate
            List<ValidationError> errors = new List<ValidationError>();
            // To Sentences
            foreach (var sentence in document.GetAllSentences().Where(s => s.Content != ""))
            {
                errors.AddRange((validator as ISentenceValidatable).Validate(sentence));
            }

            // 全エラーの可視化とエラー内容の検証。
            if (errors.Any())
            {
                // TestValidatorのエラーメッセージ定義を設定。
                var manager = new ErrorMessageManager(TestErrorMessages.Definitions);

                output.WriteLine("");
                output.WriteLine("★Errors:");
                foreach (var error in errors)
                {
                    output.WriteLine(error.ToString());
                    output.WriteLine(manager.GetErrorMessage(error, configuration.DocumentCultureInfo));
                }
            }
        }
    }
}
